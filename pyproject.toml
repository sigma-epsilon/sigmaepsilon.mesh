[build-system]
requires = [
    "setuptools>=65.5.1",
    "setuptools-scm",
    "wheel>=0.38.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "sigmaepsilon.mesh"
version = "1.1.0"
description = "A Python package to build, manipulate and analyze polygonal meshes."
classifiers=[
        "Development Status :: 5 - Production/Stable",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3 :: Only",
        "Operating System :: OS Independent",
]
readme = {file = "README.md", content-type = "text/markdown"}
authors = [
    { name = "SigmaEpsilon", email = "bencebalogh@sigmaepsilon.com" }
]
maintainers = [
    { name = "SigmaEpsilon", email = "bencebalogh@sigmaepsilon.com" }
]
license = { file = "LICENSE" }
keywords = [
    "engineering", "mathematics", "optimization", "vector", "tensor", 
    "vector algebra", "tensor algebra", "symbolic mathematics", 
    "nonlinear optimization"
]
requires-python = ">=3.7, <3.11"
dynamic = ["dependencies", "optional-dependencies"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }
optional-dependencies.test = { file = ["requirements-test.txt"] }
optional-dependencies.dev = { file = ["requirements-dev.txt"] }
optional-dependencies.docs = { file = ["docs/requirements.txt"] }

[project.urls]
Homepage = "https://github.com/sigma-epsilon/sigmaepsilon.mesh"

[tool.coverage.run]
omit = [
    "tests/*",
    "*__init__*",
    ]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "pragma: no cover",

    # Don't complaint about numba jitted code
    "@njit",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"
